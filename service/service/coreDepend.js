const config = require('../config/apiconfig');

let api = new config.InfinitoApi(config.apiConfig);
let wallet = new config.EthWallet(config.walletConfig);
wallet.setApi(api);
let coinAPI = api.ETH;

const contractAdd = '0xc4d329240dde1231740b94c9b675177fbf4aa51a';
const abi =
[
	{
		"constant": false,
		"inputs": [
			{
				"name": "_user",
				"type": "string"
			},
			{
				"name": "_symbol",
				"type": "string"
			},
			{
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "addBounty",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_user",
				"type": "string"
			},
			{
				"name": "_symbol",
				"type": "string"
			},
			{
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "subBounty",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_user",
				"type": "string"
			},
			{
				"name": "_symbol",
				"type": "string"
			}
		],
		"name": "getAllBounty",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_user",
				"type": "string"
			},
			{
				"name": "_symbol",
				"type": "string"
			}
		],
		"name": "getPresentBounty",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_user",
				"type": "string"
			}
		],
		"name": "getSizesymbols",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_symbol",
				"type": "string"
			}
		],
		"name": "getSizeusers",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_user",
				"type": "string"
			},
			{
				"name": "i",
				"type": "uint256"
			}
		],
		"name": "getSymbol",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_symbol",
				"type": "string"
			},
			{
				"name": "i",
				"type": "uint256"
			}
		],
		"name": "getUser",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
];

const data = '';
const bounty = new config.web3.eth.Contract(abi, contractAdd);
bounty.options.from = '0x03c33d697509f0eb46844063e27bf079cb973bdd';
bounty.options.gas = 4700000;
bounty.options.data = data;

function addDepend(_gid, _lid)
{
	return new Promise(function(resolve, reject)
	{
		function checktransaction(data)
		{
			coinAPI.getTxInfo(data.tx_id).then(function(transactions){
				if (transactions.cd == "1")
				{
					return resolve(false);
				}
				else if (transactions.data.transactions.length == 0)
				{
					return checktransaction(data);
				}
				else
				{
					return resolve(true);
				}
			});
		}
		let txParams = {};
		txParams.sc = {}; 
		txParams.sc.contractAddress = contractAdd;
		txParams.sc.nameFunc = 'addDepend';
		txParams.sc.typeParams = ['string', 'string'];
		txParams.sc.paramsFuncs = [_gid, _lid];
		wallet.createRawTx(txParams).then(function(rawTx){
			return wallet.send({
				rawTx: rawTx,
				isBroadCast: true
			});
		}).then(function(data){
			return checktransaction(data);	
		});
	});
}

function getDepend(_gid, _lid)
{
	return new Promise(function(resolve, reject){
		bounty.methods.getDepend(_gid, _lid).call().then(function(data){
			return resolve(data);
		});
	});
}


function getSizeLevel(_gid)
{
	return new Promise(function(resolve, reject){
		bounty.methods.getSizeLevel(_gid).call().then(function(data){
			return resolve(data);
		});
	});
}

function getSizeGift(_lid)
{
	return new Promise(function(resolve, reject){
		bounty.methods.getSizeGift(_lid).call().then(function(data){
			return resolve(data);
		});
	});
}

function getIdLevel(_gid, _i)
{
	return new Promise(function(resolve, reject){
		bounty.methods.getIdLevel(_gid, _i).call().then(function(data){
			return resolve(data);
		});
	});
}

function getIdGift(_lid, _i)
{
	return new Promise(function(resolve, reject){
		bounty.methods.getIdGift(_lid, _i).call().then(function(data){
			return resolve(data);
		});
	});
}

function getAllLevel(_gid)
{
	return new Promise(function(resolve, reject) {
		var arr = [];
		var end = false;
		function getIdLevel(i)
		{
			if (i>=0)
			{
				bounty.methods.getIdLevel(_gid, i).call().then(function(re){
					arr.push(re);
					getIdLevel(i-1);
				});
			}
			else
			{
				end = true;
				return resolve(arr);
			}
		}
		bounty.methods.getSizeLevel(_gid).call().then(function(re){
			getUser(re-1);
		});
	});
}

function getAllGift(_lid)
{
	return new Promise(function(resolve, reject) {
		var arr = [];
		var end = false;
		function getIdGift(i)
		{
			if (i>=0)
			{
				bounty.methods.getIdGift(_lid, i).call().then(function(re){
					arr.push(re);
					getIdGift(i-1);
				});
			}
			else
			{
				end = true;
				return resolve(arr);
			}
		}
		bounty.methods.getSizeGift(_lid).call().then(function(re){
			getSymbol(re-1);
		});
	});
}


// addDepend("123", "456").then(console.log);
// getDepend("123", "456").then(console.log);
// getSizeLevel("123").then(console.log);
// getSizeGift("456").then(console.log);
// getIdLevel("123", 0).then(console.log);
// getIdGift("456", 0).then(console.log);
// getAllGift("456").then(console.log);
// getAllLevel("123").then(console.log);

module.exports =
{
	addDepend: addDepend,
	getDepend: getDepend,
	getSizeLevel: getSizeLevel,
	getSizeGift: getSizeGift,
	getIdLevel: getIdLevel,
	getIdGift: getIdGift,
	getAllLevel: getAllLevel,
	getAllGift: getAllGift
}