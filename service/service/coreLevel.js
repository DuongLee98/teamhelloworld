const config = require('../config/apiconfig');

let api = new config.InfinitoApi(config.apiConfig);
let wallet = new config.EthWallet(config.walletConfig);
wallet.setApi(api);
let coinAPI = api.ETH;

const contractAdd = '0x9007b59cd93ed1fffd47470b2408cd447a7f2fcc';
const abi =
[
	{
		"constant": false,
		"inputs": [
			{
				"name": "_id",
				"type": "string"
			},
			{
				"name": "_name",
				"type": "string"
			}
		],
		"name": "addLevel",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "i",
				"type": "uint256"
			}
		],
		"name": "getId",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_id",
				"type": "string"
			}
		],
		"name": "getName",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getSizeid",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
];

const data = '0x608060405234801561001057600080fd5b50610761806100206000396000f3006080604052600436106100615763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663545a153a81146100665780636932cf81146100f3578063ceab3dc31461014c578063e9eb550814610173575b600080fd5b34801561007257600080fd5b5061007e600435610211565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100b85781810151838201526020016100a0565b50505050905090810190601f1680156100e55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156100ff57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261007e9436949293602493928401919081908401838280828437509497506102dd9650505050505050565b34801561015857600080fd5b506101616104d1565b60408051918252519081900360200190f35b6040805160206004803580820135601f81018490048402850184019095528484526101fd94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506104d89650505050505050565b604080519115158252519081900360200190f35b60606000821015801561022a5750600154600019018211155b151561023557600080fd5b600180548390811061024357fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156102d15780601f106102a6576101008083540402835291602001916102d1565b820191906000526020600020905b8154815290600101906020018083116102b457829003601f168201915b50505050509050919050565b6060806000836040518082805190602001908083835b602083106103125780518252601f1990920191602091820191016102f3565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156103c65780601f1061039b576101008083540402835291602001916103c6565b820191906000526020600020905b8154815290600101906020018083116103a957829003601f168201915b5050505050905080516000141515156103de57600080fd5b6000836040518082805190602001908083835b602083106104105780518252601f1990920191602091820191016103f1565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156104c45780601f10610499576101008083540402835291602001916104c4565b820191906000526020600020905b8154815290600101906020018083116104a757829003601f168201915b5050505050915050919050565b6001545b90565b600060606000846040518082805190602001908083835b6020831061050e5780518252601f1990920191602091820191016104ef565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156105c25780601f10610597576101008083540402835291602001916105c2565b820191906000526020600020905b8154815290600101906020018083116105a557829003601f168201915b50505050509050805160001415156105d957600080fd5b826000856040518082805190602001908083835b6020831061060c5780518252601f1990920191602091820191016105ed565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161064d959194919091019250905061069d565b50600180548082018083556000929092528551610691917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190602088019061069d565b50600195945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106106de57805160ff191683800117855561070b565b8280016001018555821561070b579182015b8281111561070b5782518255916020019190600101906106f0565b5061071792915061071b565b5090565b6104d591905b8082111561071757600081556001016107215600a165627a7a723058200eab1d3262659c0c7ea02207488a43c285057ab6e8273bd987a66339b89606290029';
const bounty = new config.web3.eth.Contract(abi, contractAdd);
bounty.options.from = '0x03c33d697509f0eb46844063e27bf079cb973bdd';
bounty.options.gas = 4700000;
bounty.options.data = data;

function addLevel(_id, _name)
{
	return new Promise(function(resolve, reject)
	{
		function checktransaction(data)
		{
			coinAPI.getTxInfo(data.tx_id).then(function(transactions){
				if (transactions.cd == "1")
				{
					return resolve(false);
				}
				else if (transactions.data.transactions.length == 0)
				{
					return checktransaction(data);
				}
				else
				{
					return resolve(true);
				}
			});
		}
		let txParams = {};
		txParams.sc = {}; 
		txParams.sc.contractAddress = contractAdd;
		txParams.sc.nameFunc = 'addLevel';
		txParams.sc.typeParams = ['string', 'string'];
		txParams.sc.paramsFuncs = [_id, _name];
		wallet.createRawTx(txParams).then(function(rawTx){
			return wallet.send({
				rawTx: rawTx,
				isBroadCast: true
			});
		}).then(function(data){
			return checktransaction(data);	
		});
	});
}

function getName(_id)
{
	return new Promise(function(resolve, reject){
		bounty.methods.getName(_id).call().then(function(data){
			return resolve(data);
		});
	});
}

function getSizeid()
{
	return new Promise(function(resolve, reject){
		bounty.methods.getSizeid().call().then(function(data){
			return resolve(data);
		});
	});
}

function getId(_i)
{
	return new Promise(function(resolve, reject){
		bounty.methods.getId(_i).call().then(function(data){
			return resolve(data);
		});
	});
}

function getAllId()
{
	return new Promise(function(resolve, reject) {
		var arr = [];
		var end = false;
		function getId(i)
		{
			if (i>=0)
			{
				bounty.methods.getId(i).call().then(function(re){
					arr.push(re);
					getId(i-1);
				});
			}
			else
			{
				end = true;
				return resolve(arr);
			}
		}
		bounty.methods.getSizeid().call().then(function(re){
			getId(re-1);
		});
	});
}

addLevel("02", "Bronze").then(console.log);
// getName("123").then(console.log);
// getId(0).then(console.log);
// getSizeid().then(console.log);
// getAllId();

module.exports =
{
	addLevel: addLevel,
	getName: getName,
	getId: getId,
	getSizeid: getSizeid,
	getAllId: getAllId,
}