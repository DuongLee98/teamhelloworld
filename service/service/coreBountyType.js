const config = require('../config/apiconfig');

let api = new config.InfinitoApi(config.apiConfig);
let wallet = new config.EthWallet(config.walletConfig);
wallet.setApi(api);
let coinAPI = api.ETH;

const contractAdd = '0xce8dfa991d58f0e4b2e0d7a65dc8fa65d1f6d2f8';
const abi =
[
	{
		"constant": false,
		"inputs": [
			{
				"name": "_symbol",
				"type": "string"
			},
			{
				"name": "_name",
				"type": "string"
			},
			{
				"name": "_rate",
				"type": "uint256"
			},
			{
				"name": "_company",
				"type": "string"
			}
		],
		"name": "addBountytype",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_symbol",
				"type": "string"
			}
		],
		"name": "checkHasbounty",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "u",
				"type": "string"
			}
		],
		"name": "getCompany",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "u",
				"type": "string"
			}
		],
		"name": "getName",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "u",
				"type": "string"
			}
		],
		"name": "getRate",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getSizesymbols",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "i",
				"type": "uint256"
			}
		],
		"name": "getSymbol",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
];

const data = '0x608060405234801561001057600080fd5b50610f7f806100206000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636418413c146100885780636932cf811461012e5780636c0daed814610210578063708dc3fa1461028d5780639ab9d7b614610397578063b24a4e5214610418578063e1e81689146104fa575b600080fd5b34801561009457600080fd5b506100b360048036038101908080359060200190929190505050610525565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f35780820151818401526020810190506100d8565b50505050905090810190601f1680156101205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013a57600080fd5b50610195600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610604565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101d55780820151818401526020810190506101ba565b50505050905090810190601f1680156102025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021c57600080fd5b50610277600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061082a565b6040518082815260200191505060405180910390f35b61037d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610919565b604051808215151515815260200191505060405180910390f35b3480156103a357600080fd5b506103fe600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610bf9565b604051808215151515815260200191505060405180910390f35b34801561042457600080fd5b5061047f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610c7b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104bf5780820151818401526020810190506104a4565b50505050905090810190601f1680156104ec5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561050657600080fd5b5061050f610ea1565b6040518082815260200191505060405180910390f35b60606000821015801561054057506001600480549050038211155b151561054b57600080fd5b60048281548110151561055a57fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105f85780601f106105cd576101008083540402835291602001916105f8565b820191906000526020600020905b8154815290600101906020018083116105db57829003601f168201915b50505050509050919050565b6060806000836040518082805190602001908083835b60208310151561063f578051825260208201915060208101905060208303925061061a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107065780601f106106db57610100808354040283529160200191610706565b820191906000526020600020905b8154815290600101906020018083116106e957829003601f168201915b50505050509050600081511415151561071e57600080fd5b6000836040518082805190602001908083835b6020831015156107565780518252602082019150602081019050602083039250610731565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b5050505050915050919050565b6000806001836040518082805190602001908083835b6020831015156108655780518252602082019150602081019050602083039250610840565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054141515156108a657600080fd5b6001826040518082805190602001908083835b6020831015156108de57805182526020820191506020810190506020830392506108b9565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b6000600115156003866040518082805190602001908083835b6020831015156109575780518252602082019150602081019050602083039250610932565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff16151514156109a95760009050610bf1565b600083141515156109b957600080fd5b836000866040518082805190602001908083835b6020831015156109f257805182526020820191506020810190506020830392506109cd565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209080519060200190610a38929190610eae565b50826001866040518082805190602001908083835b602083101515610a725780518252602082019150602081019050602083039250610a4d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550816002866040518082805190602001908083835b602083101515610ae25780518252602082019150602081019050602083039250610abd565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209080519060200190610b28929190610eae565b506004859080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190610b66929190610eae565b505060016003866040518082805190602001908083835b602083101515610ba25780518252602082019150602081019050602083039250610b7d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff021916908315150217905550600190505b949350505050565b60006003826040518082805190602001908083835b602083101515610c335780518252602082019150602081019050602083039250610c0e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff169050919050565b6060806000836040518082805190602001908083835b602083101515610cb65780518252602082019150602081019050602083039250610c91565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d7d5780601f10610d5257610100808354040283529160200191610d7d565b820191906000526020600020905b815481529060010190602001808311610d6057829003601f168201915b505050505090506000815114151515610d9557600080fd5b6002836040518082805190602001908083835b602083101515610dcd5780518252602082019150602081019050602083039250610da8565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e945780601f10610e6957610100808354040283529160200191610e94565b820191906000526020600020905b815481529060010190602001808311610e7757829003601f168201915b5050505050915050919050565b6000600480549050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610eef57805160ff1916838001178555610f1d565b82800160010185558215610f1d579182015b82811115610f1c578251825591602001919060010190610f01565b5b509050610f2a9190610f2e565b5090565b610f5091905b80821115610f4c576000816000905550600101610f34565b5090565b905600a165627a7a72305820c0704202b5c80d7453bb2902cc0214dd485d4aa03f7afaa8a257bc3efda76c9c0029';
const bounty = new config.web3.eth.Contract(abi, contractAdd);
bounty.options.from = '0x03c33d697509f0eb46844063e27bf079cb973bdd';
bounty.options.gas = 4700000;
bounty.options.data = data;

function addBountytype(_symbol, _name, _rate, _company)
{
	return new Promise(function(resolve, reject)
	{
		function checktransaction(data)
		{
			coinAPI.getTxInfo(data.tx_id).then(function(transactions){
				if (transactions.cd == "1")
				{
					return resolve(false);
				}
				else if (transactions.data.transactions.length == 0)
				{
					return checktransaction(data);
				}
				else
				{
					return resolve(true);
				}
			});
		}
		let txParams = {};
		txParams.sc = {}; 
		txParams.sc.contractAddress = contractAdd;
		txParams.sc.nameFunc = 'addBountytype';
		txParams.sc.typeParams = ['string', 'string', 'uint256', 'string'];
		txParams.sc.paramsFuncs = [_symbol, _name, _rate, _company];
		wallet.createRawTx(txParams).then(function(rawTx){
			return wallet.send({
				rawTx: rawTx,
				isBroadCast: true
			});
		}).then(function(data){
			return checktransaction(data);	
		});
	});
}

function getName(_symbol)
{
	return new Promise(function(resolve, reject){
		bounty.methods.getName(_symbol).call().then(function(data){
			return resolve(data);
		});
	});
}

function getRate(_symbol)
{
	return new Promise(function(resolve, reject){
		bounty.methods.getRate(_symbol).call().then(function(data){
			return resolve(data);
		});
	});
}

function getSizesymbols()
{
	return new Promise(function(resolve, reject){
		bounty.methods.getSizesymbols().call().then(function(data){
			return resolve(data);
		});
	});
}

function getSymbol(_i)
{
	return new Promise(function(resolve, reject){
		bounty.methods.getSymbol(_i).call().then(function(data){
			return resolve(data);
		});
	});
}

function getCompany(_symbol)
{
	return new Promise(function(resolve, reject){
		bounty.methods.getCompany(_symbol).call().then(function(data){
			return resolve(data);
		});
	});
}

function checkHasbounty(_symbol)
{
	return new Promise(function(resolve, reject){
		bounty.methods.checkHasbounty(_symbol).call().then(function(data){
			return resolve(data);
		});
	});
}

function getAllBounty()
{
	return new Promise(function(resolve, reject) {
		var arr = [];
		var end = false;
		function getBounty(i)
		{
			if (i>=0)
			{
				bounty.methods.getSymbol(i).call().then(function(re){
					arr.push(re);
					getBounty(i-1);
				});
			}
			else
			{
				end = true;
				return resolve(arr);
			}
		}
		bounty.methods.getSizesymbols().call().then(function(re){
			getBounty(re-1);
		});
	});
}

function getArrCompany(len, _arr)
{
	return new Promise(function(resolve, reject) {
		var arr = [];
		var end = false;
		function getCompany(i)
		{
			if (i>=0)
			{
				bounty.methods.getCompany(_arr[i]).call().then(function(re){
					arr.push(re);
					getCompany(i-1);
				});
			}
			else
			{
				end = true;
				return resolve(arr);
			}
		}
		getCompany(len-1);
	});
}

// checkHasbounty("456").then(console.log);
// addBountytype("BE", "Bit Ether", 2, "Blockchain").then(console.log);
// getName("123").then(console.log);
// getRate("123").then(console.log);
// getCompany("456").then(console.log);
// getSymbol(0).then(console.log);
// getSizesymbols().then(console.log);
// getAllBounty().then(console.log);

module.exports =
{
	checkHasbounty: checkHasbounty,
	addBountytype: addBountytype,
	getName: getName,
	getRate: getRate,
	getCompany: getCompany,
	getSymbol: getSymbol,
	getSizesymbols: getSizesymbols,
	getAllBounty: getAllBounty,
	getArrCompany: getArrCompany
}